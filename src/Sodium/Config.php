<?php/* * This file is part of  Sodium. * * copyright (c) 2013 lokesh * * For the full copyright and license information, please view the LICENSE * file that was distributed with this source code. */namespace Sodium;/** * Configuration class to load config file, retrive config values * * @author Lokesh <hello@lokesh.me> * @version 1.0.1 */class Config{    private static $_config = array();    /**     * @var string     */    public static function load($config_name)    {        $main_file = __DIR__ . '/Config/Default.php';        $custom_file = __DIR__ . '/Config/' . $config_name . '.php';        if (!file_exists($main_file))            throw new Exception($main_file . 'Default Configuration file not found');        if (!file_exists($custom_file))            throw new Exception($config_name . ' Configuration file not found');        $config_main =            require($main_file);        $config_custom =            require($custom_file);        $config_custom = self::_format_array($config_custom);        self::$_config = array_merge($config_main, $config_custom);        return self::$_config;    }    public static function get($child, $parent = '')    {        if ($parent == '' && isset(self::$_config[$child]))            return self::$_config[$child];        elseif ($parent != '' && isset(self::$_config[$parent][$child]))            return self::$_config[$parent][$child];        throw new Exception('could not get item');    }    public static function getArray($parent = '', $empty = FALSE)    {        if ($parent == '')            return self::$_config;        if (isset(self::$_config[$parent]))            return self::$_config[$parent];        if ($empty)            return array();        throw new Exception('could not get item');    }    private static function _format_array(array $value)    {        $newarray = array();        foreach ($value as $key => $val) {            $key = trim($key);            $val = is_string($val) ? trim($val) : $val;            if (is_string($val) && $val != '' && is_string($key) && $key != '')                $newarray[$key] = $val;            elseif (is_int($val) && $val != '' && is_string($key) && $key != '')                $newarray[$key] = $val;            elseif (is_bool($val) && $val != '' && is_string($key) && $key != '')                $newarray[$key] = $val;            elseif (is_array($val) && is_string($key) && $key != '')                $newarray[$key] = self::_format_array($val);        }        return $newarray;    }    /**     * @return array     */    public static function getAll()    {        return self::$_config;    }}